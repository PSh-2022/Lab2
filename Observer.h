#ifndef OBSERVER_H
#define OBSERVER_H
#include <iostream>
#include <QString>
/*Наблюдатель- это поведенческий паттерн проектирования,
который создаёт механизм подписки, позволяющий одним
объектам следить и реагировать на события, происходящие в
других объектах.*/
/*абстрактный класс: необходимо создать
семейство классов (много разновидностей объекта),
при этом было бы лучше вынести общую реализацию и поведение в
отдельный класс. Останется переопределить/дописать придется только
специфичные для каждого класса методы (у каждого
разновидности объекта свое поведение) и/или расширить
функциональность класса.*/
/*Отличия между интерфейсом и абстрактным классом
1. Каждый интерфейс является абстрактным классом, не каждый
абстрактный класс – интерфейс.
2. Интерфейс содержит только public секцию, абстрактный класс не
имеет ограничений.
3. Интерфейс содержит только pure virtual methods, абстрактный класс
может содержать и поля, и не виртуальные методы.*/
/*представляет интерфейс
включающий метод, который должен вызываться
при каждом изменении.*/
class IObserver//интерфейс - наблюдатель
{
public:
   /* Виртуальный метод (виртуальная функция) — это метод класса, который может быть переопределён в классах-наследниках так,
    * что конкретная реализация метода для вызова будет определяться во время исполнения.
 */
 virtual void Update(bool fileExist, int size) = 0; //метод, обновляющий информацию о состоянии файла
/*Чисто виртуальный метод (как здесь) - метод, позволяющий создавать объект класса только как подобъект в классе-наследнике*/
/*Следовательно, объекты абстрактного класса нельзя создавать.*/
};
//класс, реализующий интерфейс - наблюдатель
/*Эти классы должны следовать общему интерфейсу
Observer чтобы Subject не зависел от конкретных
классов наблюдателей.*/
/*выполняют определенные действия в
ответ на оповещение, пришедшее от Subject.*/
class FileObserver :public IObserver//создание файла
{
    QString name; //название файла
    bool fileExist; //отметка о существовании файла
    int size;  //размер файла

public:
    FileObserver(QString _name = ""){name=_name;fileExist = false;size = 0;  }; // конструктор
    void Update(bool fileExist, int size); // метод, обновляющий информацию о состоянии файла
};
#endif // OBSERVER_H
